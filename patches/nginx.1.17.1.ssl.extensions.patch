diff -r d964b0aee8e7 src/event/ngx_event_openssl.c
--- a/src/event/ngx_event_openssl.c	Thu May 23 16:49:22 2019 +0300
+++ b/src/event/ngx_event_openssl.c	Sat Jun 01 14:53:52 2019 +0000
@@ -1588,6 +1588,88 @@
     return NGX_OK;
 }
 
+/* ----- JA3 HACK START -----------------------------------------------------*/
+#if OPENSSL_VERSION_NUMBER >= 0x10101000L
+
+void
+ngx_SSL_client_features(ngx_connection_t *c) {
+
+    unsigned short *ciphers_out = NULL;
+    unsigned short *curves_out = NULL;
+    unsigned char  *point_formats_out = NULL;
+    int             i;
+    SSL            *s = NULL;
+
+    if (!c) {
+        return;
+    }
+    s = c->ssl->connection;
+
+    /* Cipher suites */
+    if ((c->ssl->ciphers_sz = SSL_client_hello_get0_ciphers(s, &ciphers_out)) && ciphers_out) {
+        c->ssl->ciphers = ngx_pnalloc(c->pool, c->ssl->ciphers_sz);
+        ngx_memcpy(c->ssl->ciphers, ciphers_out, c->ssl->ciphers_sz);
+        c->ssl->ciphers_sz /= 2;
+    }
+
+    /* Elliptic curve points */
+    if (SSL_client_hello_get0_ext(s, TLSEXT_TYPE_elliptic_curves, (const unsigned char**)&curves_out, &c->ssl->curves_sz)) {
+        c->ssl->curves = ngx_pnalloc(c->pool, c->ssl->curves_sz);
+        c->ssl->curves_sz /= 2;
+        for (i = 1; i < c->ssl->curves_sz; ++i)
+            c->ssl->curves[i-1] = ntohs(curves_out[i]);
+        c->ssl->curves_sz--;
+    }
+
+    /* Elliptic curve point formats */
+    if (SSL_client_hello_get0_ext(s, TLSEXT_TYPE_ec_point_formats, (const unsigned char**) &point_formats_out, &c->ssl->point_formats_sz) && c->ssl->point_formats_sz > 1) {
+        c->ssl->point_formats = ngx_pnalloc(c->pool, --c->ssl->point_formats_sz);
+        ngx_memcpy(c->ssl->point_formats, point_formats_out+1, c->ssl->point_formats_sz);
+    }
+}
+
+/* should *ALWAYS return 1
+ * # define SSL_CLIENT_HELLO_SUCCESS 1
+ *
+ * otherwise
+ *   A failure in the ClientHello callback terminates the connection.
+ */
+int
+ngx_SSL_early_cb_fn(SSL *s, int *al, void *arg) {
+
+    int                            got_extensions;
+    int                           *ext_out;
+    size_t                         ext_len;
+    ngx_connection_t              *c;
+
+    c = arg;
+
+    if (!c || !c->ssl) {
+        return 1;
+    }
+
+    c->ssl->extensions_size = 0;
+    c->ssl->extensions = NULL;
+    got_extensions = SSL_client_hello_get1_extensions_present(s,
+                                                       &ext_out,
+                                                       &ext_len);
+    if (got_extensions) {
+        if (ext_out && ext_len) {
+            c->ssl->extensions =
+                ngx_palloc(c->pool, sizeof(int) * ext_len);
+            if (c->ssl->extensions != NULL) {
+                c->ssl->extensions_size = ext_len;
+                ngx_memcpy(c->ssl->extensions, ext_out, sizeof(int) * ext_len);
+                OPENSSL_free(ext_out);
+            }
+        }
+    }
+
+    ngx_SSL_client_features(c);
+
+    return 1;
+}
+#endif
+/* ----- JA3 HACK END -------------------------------------------------------*/
 
 ngx_int_t
 ngx_ssl_handshake(ngx_connection_t *c)
@@ -1603,6 +1704,10 @@
 
     ngx_ssl_clear_error(c->log);
 
+#if OPENSSL_VERSION_NUMBER >= 0x10101000L
+    SSL_CTX_set_client_hello_cb(c->ssl->session_ctx, ngx_SSL_early_cb_fn, c);
+#endif
+
     n = SSL_do_handshake(c->ssl->connection);
 
     ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, "SSL_do_handshake: %d", n);
diff -r d964b0aee8e7 src/event/ngx_event_openssl.h
--- a/src/event/ngx_event_openssl.h	Thu May 23 16:49:22 2019 +0300
+++ b/src/event/ngx_event_openssl.h	Sat Jun 01 14:53:52 2019 +0000
@@ -99,6 +99,23 @@
     unsigned                    in_early:1;
     unsigned                    early_preread:1;
     unsigned                    write_blocked:1;
+
+/* ----- JA3 HACK START -----------------------------------------------------*/
+#if OPENSSL_VERSION_NUMBER >= 0x10101000L
+
+    size_t                      ciphers_sz;
+    unsigned short             *ciphers;
+
+    size_t                      extensions_size;
+    int                        *extensions;
+
+    size_t                      curves_sz;
+    unsigned short             *curves;
+
+    size_t                      point_formats_sz;
+    unsigned char              *point_formats;
+#endif
+/* ----- JA3 HACK END -------------------------------------------------------*/
 };
 
 
